//单链表的分解
//原题链接:https://leetcode.cn/problems/partition-list/
//给你一个链表的头结点head和一个特定值x,请你对链表进行分割,使得所有小于x的节点都出现在大于或等于x的节点之前

ListNode partition(ListNode head,int x) {
  //存放小于x的链表的虚拟头结点
  ListNode dummy1 = new ListNode(-1);
  //存放大于等于x的链表的虚拟头结点
  ListNode dummy2 = new ListNode(-1);
  //p1,p2指针负责生成结果链表
  ListNode p1 = dummy1,p2 = dummy2;
  //P负责遍历原链表,类似合并两个有序链表的逻辑
  //在此处是把一个链表拆分成两个链表
  ListNode p = head;
  while (p != null) {
    if(p.val >= x){
      p2.next = p;
      p2 = p2.next;
    }else{
      p1.next = p;
      p1 = p1.next;
    }
    //断开原链表中的每个节点的next指针
    ListNode temp = p.next;
    p.next = null;
    p = temp;
   }
   //连接两个链表
   p1.next = dummy2.next;
   return dummy1.next;
  }
  
     
